module ai (	input logic Clk, Reset_Load_Clear, Run, Mvar,
						output logic Shift_En, Ld_A, Ld_B, ResetAX, ResetB, Add, Sub);
    // Declare signals curr_state, next_state of type enum
    // with enum values of A, B, ..., F as the state values
	 // Note that the length implies a max of 8 states, so you will need to bump this up for 8-bits
    enum logic [4:0] {A1, A2, A3, A4, A5, A6, A7, A8, S1, S2, S3, S4, S5, S6, S7, S8, H1, S, H2}   curr_state, next_state; 

	//updates flip flop, current state is the only one
	always_ff @ (posedge Clk or posedge Reset_Load_Clear ) 
		begin
				if (Reset_Load_Clear)
					curr_state <= S; 
				else
					curr_state <= next_state;
		end

    // Assign outputs based on state
	always_comb
    begin
        
		  next_state  = curr_state;	//required because I haven't enumerated all possibilities below
        unique case (curr_state) 

            S :    if(Run)
							next_state = A1;
							  

            A1 :    next_state = S1;				//Shift
            S1 :    next_state = A2;				//Add
				
            A2 :    next_state = S2;
            S2 :    next_state = A3;
				
				A3 :    next_state = S3;
				S3 :    next_state = A4;
				
				A4 :    next_state = S4;
				S4 :    next_state = A5;
				
				A5 :    next_state = S5;
				S5 :    next_state = A6;
				
				A6 :    next_state = S6;
				S6 :    next_state = A7;
				
				A7 :    next_state = S7;
				S7 :    next_state = A8;
				
				A8 :    next_state = S8;
				S8 :    next_state = H1;
				
            H1 :    if (Run) 
                       next_state = H1;
						  else
								next_state = H2;
				H2 :    if (Run) 
								next_state = S;

							  
        endcase
	
		  // Assign outputs based on ‘state’
					Sub = 1'b0;
                Ld_B = 1'b0;
                Shift_En = 1'b0;
					 Ld_A = 1'b0;
					 Add = 1'b0;
					 ResetAX = 1'b0;
        case (curr_state) 

	   	   A1: 
	         begin
                Add = Mvar;
					 Ld_A = Mvar;
		      end
				A2: 
	         begin
                Add = Mvar;
					 Ld_A = Mvar;
					
		      end
				A3: 
	         begin
                Add = Mvar;
					 Ld_A = Mvar;
					 
		      end
				A4: 
	         begin
                Add = Mvar;
					 Ld_A = Mvar;

		      end
				A5: 
	         begin
                Add = Mvar;
					 Ld_A = Mvar;
		      end
				A6: 
	         begin
                Add = Mvar;
					 Ld_A = Mvar;
		      end
				A7: 
	         begin
                Add = Mvar;
					 Ld_A = Mvar;
		      end
				A8:
	         begin
					if(Mvar) 
					begin
						Sub = 1'b1;
						Ld_A = 1'b1;
					end
		      end
	   	   H1:
		      begin
                
		      end
				S: 
		      begin
					 Ld_B = Reset_Load_Clear;
                ResetAX = 1'b1;
		      end
				H2: 
		      begin

		      end
	   	   default:  //default case, can also have default assignments for Ld_A and Ld_B before case
		      begin 
                Shift_En = 1'b1;
		      end
        endcase
    end

endmodule

